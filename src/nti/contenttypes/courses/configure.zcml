<!-- -*- mode: nxml -*- -->
<configure	xmlns="http://namespaces.zope.org/zope"
			xmlns:i18n="http://namespaces.zope.org/i18n"
			xmlns:ext="http://nextthought.com/ntp/ext"
			xmlns:zcml="http://namespaces.zope.org/zcml"
			i18n_domain="nti.dataserver">

	<include package="zope.component" file="meta.zcml" />
	<include package="zope.security" file="meta.zcml" />
	<include package="zope.component" />
	<include package="zope.security" />

	<!-- for the annotation-based role maps -->
	<include package="zope.securitypolicy" />

	<include package="nti.mimetype" />
	<include package="nti.recorder" />
	<include package="nti.publishing" />
	<include package="nti.contentlibrary" />

	<include package="zope.generations" />
	<include package="zope.generations" file="subscriber.zcml" />

	<!-- Database creation and migration -->
	<!--
		This one depends on the structures set up by nti.dataserver, but
		should run before, e.g., nti.app.products.courseware, hence
		the funky name
	-->
	<utility factory=".generations.install._CoursesSchemaManager"
			 name="nti.dataserver-AAA.contenttypes.courses"
			 provides="zope.generations.interfaces.IInstallableSchemaManager" />

	<!-- Externalization -->
	<include package="nti.externalization" file="meta.zcml" />
	<include package="nti.externalization" />

	<ext:registerAutoPackageIO
		root_interfaces=".interfaces.ICatalogFamily
						 .interfaces.ICourseInstance
						 .interfaces.ICourseOutlineNode
						 .interfaces.ICourseCatalogEntry
						 .interfaces.IJoinCourseInvitation
						 .interfaces.ICourseLessonSyncResults
						 .interfaces.ICourseCatalogInstructorInfo
						 .interfaces.ICourseSynchronizationResults
						 .interfaces.ICourseInstanceAdministrativeRole"
		modules=".administered .catalog .courses .outlines .sharing ._synchronize .invitation" />

	<ext:registerAutoPackageIO
		root_interfaces=".legacy_catalog.ICourseCatalogLegacyEntry
						 .legacy_catalog.ICourseCreditLegacyInfo
						 .legacy_catalog.ICourseCatalogInstructorLegacyInfo"
		modules=".legacy_catalog"
		iobase=".legacy_catalog._LegacyCatalogAutoPackageSearchingScopedInterfaceObjectIO"/>

	<adapter factory=".externalization._CourseInstanceEnrollmentRecordExternalizer"
			 for=".interfaces.ICourseInstanceEnrollmentRecord"
			 provides="nti.externalization.interfaces.IInternalObjectExternalizer"
			 name="summary" />

	<adapter factory=".externalization._AdminLevelExternalizer"
             for=".interfaces.ICourseAdministrativeLevel"
             provides="nti.externalization.interfaces.IInternalObjectExternalizer"
             name="summary" />

	<!-- Externalize the CourseInstanceSharingScope like the 'community' it appears to be. -->
	<adapter factory="nti.dataserver.users.users_external._EntitySummaryExternalObject"
			 for=".interfaces.ICourseInstanceSharingScope"
			 name="summary" />

	<adapter factory="nti.dataserver.users.users_external._EntityExternalObject"
			 for=".interfaces.ICourseInstanceSharingScope" />

	<adapter factory=".externalization._CourseInstanceSharingScopeExporter"
			 for=".interfaces.ICourseInstanceSharingScope"
			 name="exporter" />

	<adapter factory=".externalization._CourseOutlineNodeExporter"
			 for=".interfaces.ICourseOutlineNode"
			 name="exporter" />

	<adapter factory=".externalization._CourseCatalogEntryExporter"
			 for=".interfaces.ICourseCatalogEntry"
			 name="exporter" />

	<adapter factory=".externalization._CourseVendorInfoExporter"
			 for=".interfaces.ICourseInstanceVendorInfo"
			 name="exporter" />

	<adapter factory=".internalization._CourseOutlineNodeUpdater"
			 for=".interfaces.ICourseOutlineNode"
			 provides="nti.externalization.interfaces.IInternalObjectUpdater" />

	<adapter factory=".internalization._CourseCatalogEntryUpdater"
			 for=".interfaces.ICourseCatalogEntry"
			 provides="nti.externalization.interfaces.IInternalObjectUpdater" />

	<adapter factory=".internalization.CourseCatalogLegacyEntryUpdater"
			 for=".legacy_catalog.ICourseCatalogLegacyEntry"
			 provides="nti.externalization.interfaces.IInternalObjectUpdater" />

	<adapter factory="._bundle._CourseContentBundleIO" />

	<!-- Decorators -->
	<subscriber factory=".decorators._CourseOutlineNodeDecorator"
				for=".interfaces.ICourseOutlineNode"
				provides="nti.externalization.interfaces.IExternalObjectDecorator"/>

	<subscriber factory=".decorators._CourseOutlineDecorator"
				for=".interfaces.ICourseOutline"
				provides="nti.externalization.interfaces.IExternalObjectDecorator"/>

	<subscriber factory=".decorators._InstructorLegacyInfoDecorator"
				for=".legacy_catalog.ICourseCatalogInstructorLegacyInfo"
				provides="nti.externalization.interfaces.IExternalObjectDecorator"/>

	<subscriber factory=".decorators._CourseInstanceSharingScopeDecorator"
				for=".interfaces.ICourseInstanceSharingScope"
				provides="nti.externalization.interfaces.IExternalObjectDecorator"/>

	<subscriber factory=".decorators._CourseNonPublicStatusDecorator"
				for=".interfaces.ICourseCatalogEntry"
				provides="nti.externalization.interfaces.IExternalObjectDecorator"/>

	<subscriber factory=".decorators._CourseNonPublicStatusDecorator"
                for=".interfaces.ICourseInstance"
                provides="nti.externalization.interfaces.IExternalObjectDecorator"/>
                
 	<subscriber factory=".decorators._CourseAdminLevelDecorator"
				for=".interfaces.ICourseCatalogEntry"
				provides="nti.externalization.interfaces.IExternalObjectDecorator"/>

	<subscriber factory=".decorators._CourseAdminLevelDecorator"
                for=".interfaces.ICourseInstance"
                provides="nti.externalization.interfaces.IExternalObjectDecorator"/>

 	<subscriber factory=".decorators._CourseSiteDecorator"
				for=".interfaces.ICourseCatalogEntry"
				provides="nti.externalization.interfaces.IExternalObjectDecorator"/>

	<subscriber factory=".decorators._CourseSiteDecorator"
                for=".interfaces.ICourseInstance"
                provides="nti.externalization.interfaces.IExternalObjectDecorator"/>

	<!-- Events -->
	<subscriber handler=".subscribers.install_site_course_catalog" />
	<subscriber handler=".subscribers.uninstall_site_course_catalog" />

	<subscriber handler=".subscribers.on_course_instance_imported" />
	<subscriber handler=".subscribers.on_course_instance_available" />

	<subscriber handler=".subscribers.on_user_removed" />
	<subscriber handler=".subscribers.on_course_instance_removed" />
	<subscriber handler=".subscribers.on_before_course_instance_removed" />

	<subscriber handler=".subscribers.on_course_vendor_info_synced" />
	<subscriber handler=".subscribers.roles_sync_on_course_instance" />
	<subscriber handler=".subscribers.sync_catalog_when_library_synched" />

	<subscriber handler=".subscribers.on_course_outline_node_added" />
	<subscriber handler=".subscribers.on_course_outline_node_moved" />

	<subscriber handler=".subscribers.on_assessment_policy_modified" />
	<subscriber handler=".subscribers.on_unlock_assessment_policies" />
	<subscriber handler=".subscribers.on_assessment_date_context_modified" />

    <subscriber handler=".subscribers.on_course_role_removed" />
    <subscriber handler=".subscribers.on_course_editor_added" />
    <subscriber handler=".subscribers.on_course_instructor_added" />

	<!-- Roles and permissions -->
	<include package="zope.securitypolicy" file="meta.zcml" />
	<include package="zope.security" file="meta.zcml" />

	<!--
		Roles for instructors are defined globally with
		a set of permissions, and an implementation of IPrincipalRoleMap
		locally to each course maps the proper people into those roles.
		Recall that role permission grants are not transitive.
	-->
	<role
		id="nti.roles.course_instructor"
		title="A course instructor"
		description="This role should have most permissions defined
					 for course objects."/>
	<role
		id="nti.roles.course_ta"
		title="A course teaching assistant"
		description="This role may have fewer permissions than an
					 instructor" />

	<role
		id="nti.roles.course_content_editor"
		title="A course content admin"
		description="This role should have full edit permissions
					on course objects." />

	<!-- ACLs -->
	<adapter factory=".acl.CourseBoardACLProvider" />
	<adapter factory=".acl.CourseForumACLProvider" />
	<adapter factory=".acl.CourseInstanceACLProvider" />
	<adapter factory=".acl.CourseOutlineNodeACLProvider" />
	<adapter factory=".acl.CourseCatalogEntryACLProvider" />

	<adapter factory=".principalrole.CourseInstancePrincipalRoleMap" />

	<adapter factory=".principalrole.CourseRolePermissionManager"
			 provides=".interfaces.ICourseRolePermissionManager" />

    <subscriber factory=".acl.RenderableContentPackageSupplementalACLProvider"
                provides="nti.dataserver.interfaces.ISupplementalACLProvider"
                for="nti.contentlibrary.interfaces.IRenderableContentPackage" />

	<!-- Catalog -->
	<!--
		We provide one global catalog,
		but every site that registers its own courses
		will also register its own catalog.
		Right now, these do *not* support a hierarchy.
	-->
	<utility factory=".catalog.GlobalCourseCatalog"
			 provides=".interfaces.IGlobalCourseCatalog" />

	<subscriber handler=".catalog._clear_catalog_cache_when_course_updated"
				for=".interfaces.ICourseInstance
					 zope.lifecycleevent.IObjectAddedEvent" />

	<subscriber handler=".catalog._clear_catalog_cache_when_course_updated"
				for=".interfaces.ICourseInstance
					 .interfaces.ICourseInstanceAvailableEvent" />

	<subscriber handler=".catalog._clear_catalog_cache_when_course_updated"
				for=".interfaces.ICourseInstance
					 zope.lifecycleevent.IObjectRemovedEvent" />

	<subscriber handler=".catalog._clear_catalog_cache_when_course_updated"
                for=".interfaces.ICourseInstance
                     .interfaces.ICourseInstanceRemovedEvent" />

	<subscriber handler=".catalog._clear_catalog_cache_when_course_updated"
				for=".interfaces.ICourseInstance
					 .interfaces.ICourseInstanceImportedEvent" />

	<!-- By default, courses store their own catalog entries -->
	<adapter factory=".legacy_catalog.CourseInstanceCatalogLegacyEntryFactory" />
	<adapter factory=".legacy_catalog.CourseSubInstanceCatalogLegacyEntryFactory" />

	<!-- catalog entries can be resolved by ntiid -->
	<utility factory=".ntiids._CourseInfoNTIIDResolver" name="CourseInfo" />

	<!-- outline nodes can be resolved by ntiid -->
	<utility factory=".ntiids._CourseOutlineNodeNTIIDResolver" name="NTICourseOutlineNode" />

	<!-- course bundles can be resolved by ntiid -->
	<utility factory=".ntiids._CourseBundleNTIIDResolver" name="Bundle:CourseBundle" />

	<!-- Enrollment -->
	<adapter factory=".enrollment.DefaultCourseEnrollmentManager" />

	<adapter factory=".enrollment.DefaultCourseEnrollmentManager"
			 for=".interfaces.ICourseInstance
				  pyramid.interfaces.IRequest" />

	<adapter factory=".enrollment.EnrollmentMappedCourseEnrollmentManager" />

	<adapter factory=".enrollment.EnrollmentMappedCourseEnrollmentManager"
			 for=".interfaces.IEnrollmentMappedCourseInstance
				  pyramid.interfaces.IRequest" />

	<adapter factory=".enrollment.global_course_catalog_enrollment_storage" />
	<adapter factory=".enrollment.DefaultCourseInstanceEnrollmentStorageFactory" />
	<adapter factory=".enrollment.DefaultCourseCatalogEnrollmentStorageFactory" />

	<adapter factory=".enrollment.DefaultCourseEnrollments" />

	<!-- Administered Courses -->
	<configure zcml:condition="not-have testmode">
		<utility factory=".administered.IndexAdminCourses" />
	</configure>
	<configure zcml:condition="have testmode">
		<utility factory=".administered.IterableAdminCourses" />
	</configure>

	<!-- A subscriber for getting admin roles -->
	<subscriber factory=".administered._DefaultPrincipalAdministrativeRoleCatalog"
				provides=".interfaces.IPrincipalAdministrativeRoleCatalog" />

	<!-- anything that can become a Principal... -->
	<subscriber factory=".enrollment.DefaultPrincipalEnrollments"
				provides=".interfaces.IPrincipalEnrollments"
				for="zope.interface.Interface" />

	<!-- managing enrollment when things are deleted -->
	<!-- anything that can get IPrincipalEnrollments -->
	<subscriber handler=".enrollment.on_principal_deletion_unenroll"
				for="zope.security.interfaces.IPrincipal
					 zc.intid.interfaces.IBeforeIdRemovedEvent" />

	<subscriber handler=".enrollment.on_principal_deletion_unenroll"
				for="nti.dataserver.interfaces.IUser
					 zc.intid.interfaces.IBeforeIdRemovedEvent" />

	<subscriber handler=".enrollment.on_course_deletion_unenroll"
				for=".interfaces.ICourseInstance
					 zc.intid.interfaces.IBeforeIdRemovedEvent"/>

	<!-- deny open enrollment -->
	<subscriber handler=".enrollment.check_open_enrollment_record_added" />

	<!-- managing enrollment as you change scope -->
	<subscriber handler=".enrollment.on_modified_potentially_move_courses" />

	<!-- managing the scope as you enroll/drop/modify -->
	<subscriber handler=".sharing._course_bundle_updated" />
	<subscriber handler=".sharing.on_course_instance_imported" />
	<subscriber handler=".sharing.on_drop_exit_scope_membership" />
	<subscriber handler=".sharing.on_enroll_record_scope_membership" />
	<subscriber handler=".sharing.on_modified_update_scope_membership" />
	<subscriber handler=".sharing.on_moved_between_courses_update_scope_membership" />

	<!-- update packages -->
	<subscriber handler=".subscribers._on_course_imported" />
	<subscriber handler=".subscribers._update_course_bundle" />
	<subscriber handler=".subscribers._update_course_packages" />
	<subscriber handler=".subscribers._update_course_bundle_on_package_removal" />

	<!-- weak references -->
	<adapter factory="nti.intid.wref.ArbitraryOrderableWeakRef"
			 provides="nti.wref.interfaces.IWeakRef"
			 for=".interfaces.ICourseInstanceEnrollmentRecord" />

	<!-- These are a type of Entity, but they have no global
	name, so we have to be careful to override the weak ref -->
	<adapter factory=".sharing._CourseInstanceSharingScopeWeakRef"
			 provides="nti.wref.interfaces.IWeakRef"
			 for=".interfaces.ICourseInstanceSharingScope" />

	<adapter factory=".sharing._CourseInstanceSharingScopePrincipal"
			 for=".interfaces.ICourseInstanceSharingScope"
			 provides="zope.security.interfaces.IPrincipal" />

	<!-- vendor info -->
	<adapter factory=".vendorinfo.CourseInstanceVendorInfo" />

	<!-- Synchronizing external things into objects -->
	<adapter factory="._synchronize._GenericFolderSynchronizer"
			 for=".catalog.CourseCatalogFolder
				  nti.contentlibrary.interfaces.IDelimitedHierarchyBucket" />

	<adapter factory="._synchronize._GenericFolderSynchronizer"
			 for=".interfaces.ICourseAdministrativeLevel
				  nti.contentlibrary.interfaces.IDelimitedHierarchyBucket" />

	<adapter factory="._synchronize._ContentCourseSynchronizer" />
	<adapter factory="._synchronize._CourseSubInstancesSynchronizer" />
	<adapter factory="._synchronize._MissingCourseSubInstancesSynchronizer" />
	<adapter factory="._synchronize._ContentCourseSubInstanceSynchronizer" />

	<!-- Assignment date overrides and policies -->
	<adapter factory=".assignment.CourseSubInstanceAssignmentDateContextFactory" />
	<adapter factory=".assignment.CourseInstanceAssignmentPoliciesFactory" />

	<!-- dublincore annotations -->
	<include package="zope.dublincore" />
	<adapter factory="nti.contentlibrary.dublincore.DisplayableContentZopeDublinCoreAdapter"
			 for=".interfaces.ICourseCatalogEntry"
			 provides="zope.dublincore.interfaces.IWriteZopeDublinCore" />

	<class class=".catalog.CourseCatalogEntry">
		<implements interface="zope.annotation.interfaces.IAttributeAnnotatable" />
	</class>

	<class class=".legacy_catalog._CourseSubInstanceCatalogLegacyEntry">
		<implements interface="zope.annotation.interfaces.IAttributeAnnotatable" />
	</class>

	<!-- traversal -->
	<adapter factory=".traversal.CourseCatalogEntryTraverser"
			 for=".interfaces.ICourseInstance *"
			 name="CourseCatalogEntry" />

	<!-- Invitations -->
	<adapter factory=".invitation.JoinCourseInvitationActor"
			 provides=".interfaces.IJoinCourseInvitationActor"
			 for=".interfaces.IJoinCourseInvitation" />

	<!-- Metadata -->
	<subscriber	factory=".predicates._CoursePrincipalObjects"
				provides="nti.dataserver.metadata.interfaces.IPrincipalMetadataObjects" />

	<subscriber	factory=".predicates._EnrollmentPrincipalObjects"
				provides="nti.dataserver.metadata.interfaces.IPrincipalMetadataObjects" />

	<subscriber	factory=".predicates._UserBoardPrincipalObjects"
				provides="nti.dataserver.metadata.interfaces.IPrincipalMetadataObjects" />

	<!--
		To get maximum externalization testing, let the dataserver
		register all its decorators.
		But note we don't want a hard (circular) dependency on this
		if we can avoid it because we are a plugin to it.
	-->
	<configure zcml:condition="have testmode">
		<include package="nti.dataserver.contenttypes.forums"
				 zcml:condition="installed nti.dataserver.contenttypes.forums" />
	</configure>

	<!-- Site -->
	<adapter factory=".adapters._entry_to_site" />
	<adapter factory=".adapters._course_to_site" />

	<!-- Outline nodes -->
	<adapter factory=".adapters._outlinenode_to_course" />

	<!-- Export Filer -->
	<adapter factory=".filer.CourseExportFiler"
			 for=".interfaces.ICourseInstance"
			 provides=".interfaces.ICourseExportFiler" />

	<!-- Exporter -->
	<utility factory=".exporter.CourseExporter" />
	<utility factory=".exporter.RoleInfoExporter" name="006:Role_Info" />
	<utility factory=".exporter.VendorInfoExporter" name="005:Vendor_Info" />
	<utility factory=".exporter.CourseInfoExporter" name="004:Course_Info" />
	<utility factory=".exporter.CourseOutlineExporter" name="008:Course_Outline" />
	<utility factory=".exporter.BundleMetaInfoExporter" name="001:Bundle_Metainfo" />
	<utility factory=".exporter.BundleDCMetadataExporter" name="002:Bundle_DC_Metadata" />
	<utility factory=".exporter.AssignmentPoliciesExporter" name="100:Assignment_Policies" />
	<utility factory=".exporter.BundlePresentationAssetsExporter" name="003:Presentation_Assets" />

	<!-- Importer -->
	<utility factory=".importer.CourseImporter" />
	<!-- 1. -->
	<utility factory=".importer.BundleMetaInfoImporter" name="001:Bundle_Metainfo" />
	<!-- 2. -->
	<utility factory=".importer.BundlePresentationAssetsImporter" name="002:Presentation_Assets" />
	<!-- 3. -->
	<utility factory=".importer.CourseInfoImporter" name="003:Course_Info" />
	<!-- 4. -->
	<utility factory=".importer.VendorInfoImporter" name="004:Vendor_Info" />
	<!-- 5. -->
	<utility factory=".importer.CourseOutlineImporter" name="005:Course_Outline" />
	<!-- 6. -->
	<utility factory=".importer.RoleInfoImporter" name="006:Role_Info" />
	<!-- 100 -->
	<utility factory=".importer.AssignmentPoliciesImporter" name="100:Assignment_Policies" />

	<!-- Grading -->
	<include package=".grading" />

	<!-- Discussions -->
	<include package=".discussions" />

	<!-- Index -->
	<adapter factory=".adapters._course_keywords" />

</configure>
