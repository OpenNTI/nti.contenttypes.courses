<!-- -*- mode: nxml -*- -->
<configure	xmlns="http://namespaces.zope.org/zope"
			xmlns:i18n="http://namespaces.zope.org/i18n"
			xmlns:ext="http://nextthought.com/ntp/ext"
			xmlns:zcml="http://namespaces.zope.org/zcml"
			i18n_domain="nti.dataserver">

	<include package="zope.component" file="meta.zcml" />
	<include package="zope.security" file="meta.zcml" />
	<include package="zope.component" />
	<include package="zope.security" />

	<!-- for the annotation-based role maps -->
	<include package="zope.securitypolicy" />

	<include package="nti.mimetype" />

	<include package="zope.generations" />
	<include package="zope.generations" file="subscriber.zcml" />

	<!-- Database creation and migration -->
	<!--
		This one depends on the structures set up by nti.dataserver, but
		should run before, e.g., nti.app.products.courseware, hence
		the funky name
	-->
	<utility factory=".generations.install._CoursesSchemaManager"
			 name="nti.dataserver-AAA.contenttypes.courses"
			 provides="zope.generations.interfaces.IInstallableSchemaManager" />

	<!-- Externalization -->
	<include package="nti.externalization" file="meta.zcml" />
	<include package="nti.externalization" />

	<ext:registerAutoPackageIO
		root_interfaces=".interfaces.ICourseInstance
						 .interfaces.ICourseOutlineNode
						 .interfaces.ICourseCatalogEntry
						 .interfaces.ICourseCatalogInstructorInfo"
		modules=".courses .outlines .catalog .sharing" />

	<ext:registerAutoPackageIO
		root_interfaces=".legacy_catalog.ICourseCatalogLegacyEntry
						 .legacy_catalog.ICourseCreditLegacyInfo
						 .legacy_catalog.ICourseCatalogInstructorLegacyInfo"
		modules=".legacy_catalog"
		iobase=".legacy_catalog._LegacyCatalogAutoPackageSearchingScopedInterfaceObjectIO"/>

	<adapter factory=".externalization._CourseInstanceEnrollmentRecordExternalizer"
			 for=".interfaces.ICourseInstanceEnrollmentRecord"
			 provides="nti.externalization.interfaces.IInternalObjectExternalizer"
			 name="summary" />
			 
	<!-- Externalize the CourseInstanceSharingScope like the 'community'
	it appears to be. -->
	<adapter factory="nti.dataserver.users.users_external._EntitySummaryExternalObject"
			 for=".interfaces.ICourseInstanceSharingScope"
			 name="summary" />

	<adapter factory="nti.dataserver.users.users_external._EntityExternalObject"
			 for=".interfaces.ICourseInstanceSharingScope" />

	<subscriber factory=".decorators._SharingScopesAndDiscussionDecorator"
				provides="nti.externalization.interfaces.IExternalObjectDecorator" />

	<subscriber factory=".decorators._AnnouncementsDecorator"
				provides="nti.externalization.interfaces.IExternalObjectDecorator" />

	<subscriber factory=".decorators._LegacyCCEFieldDecorator"
				provides="nti.externalization.interfaces.IExternalObjectDecorator" />

	<subscriber factory=".decorators._SharedScopesForumDecorator"
				provides="nti.externalization.interfaces.IExternalObjectDecorator" />

	<!-- Events -->
	<subscriber handler=".subscribers.install_site_course_catalog" />
	<subscriber handler=".subscribers.uninstall_site_course_catalog" />
	<subscriber handler=".subscribers.sync_catalog_when_library_synched" />

	<!-- Roles and permissions -->
	<include package="zope.securitypolicy" file="meta.zcml" />
	<include package="zope.security" file="meta.zcml" />

	<!--
		Roles for instructors are defined globally with
		a set of permissions, and an implementation of IPrincipalRoleMap
		locally to each course maps the proper people into those roles.
		Recall that role permission grants are not transitive.
	-->

	<role
		id="nti.roles.course_instructor"
		title="A course instructor"
		description="This role should have most permissions defined
					 for course objects."/>
	<role
		id="nti.roles.course_ta"
		title="A course teaching assistant"
		description="This role may have fewer permissions than an
					 instructor" />

	<adapter factory=".acl.CourseInstanceACLProvider" />
	<adapter factory=".acl.CourseCatalogEntryACLProvider" />
	<adapter factory=".principalrole.CourseInstancePrincipalRoleMap" />

	<!-- Catalog -->
	<!--
		We provide one global catalog,
		but every site that registers its own courses
		will also register its own catalog.
		Right now, these do *not* support a hierarchy.
	-->
	<utility factory=".catalog.GlobalCourseCatalog"
			 provides=".interfaces.IGlobalCourseCatalog" />

	<subscriber handler=".catalog._clear_catalog_cache_when_course_updated"
				for=".interfaces.ICourseInstance
					 .interfaces.ICourseInstanceAvailableEvent" />

	<subscriber handler=".catalog._clear_catalog_cache_when_course_updated"
				for=".interfaces.ICourseInstance
					 zope.lifecycleevent.IObjectRemovedEvent" />

	<!-- By default, courses store their own catalog entries -->
	<adapter factory=".legacy_catalog.CourseInstanceCatalogLegacyEntryFactory" />
	<adapter factory=".legacy_catalog.CourseSubInstanceCatalogLegacyEntryFactory" />

	<!-- catalog entries can be resolved by ntiid -->
	<utility factory=".ntiids._CourseInfoNTIIDResolver"
			 name="CourseInfo" />

	<!-- Enrollment -->
	<adapter factory=".enrollment.DefaultCourseEnrollmentManager" />

	<adapter factory=".enrollment.DefaultCourseEnrollmentManager"
			 for=".interfaces.ICourseInstance
				  pyramid.interfaces.IRequest" />

	<adapter factory=".enrollment.EnrollmentMappedCourseEnrollmentManager" />

	<adapter factory=".enrollment.EnrollmentMappedCourseEnrollmentManager"
			 for=".interfaces.IEnrollmentMappedCourseInstance
				  pyramid.interfaces.IRequest" />

	<adapter factory=".enrollment.global_course_catalog_enrollment_storage" />
	<adapter factory=".enrollment.DefaultCourseInstanceEnrollmentStorageFactory" />
	<adapter factory=".enrollment.DefaultCourseCatalogEnrollmentStorageFactory" />

	<adapter factory=".enrollment.DefaultCourseEnrollments" />

	<!-- anything that can become a Principal... -->
	<subscriber factory=".enrollment.DefaultPrincipalEnrollments"
				provides=".interfaces.IPrincipalEnrollments"
				for="zope.interface.Interface" />

	<!-- managing enrollment when things are deleted -->
	<!-- anything that can get IPrincipalEnrollments -->
	<subscriber handler=".enrollment.on_principal_deletion_unenroll"
				for="zope.security.interfaces.IPrincipal
					 nti.intid.interfaces.IIntIdRemovedEvent" />

	<subscriber handler=".enrollment.on_principal_deletion_unenroll"
				for="nti.dataserver.interfaces.IUser
					 nti.intid.interfaces.IIntIdRemovedEvent" />

	<subscriber handler=".enrollment.on_course_deletion_unenroll"
				for=".interfaces.ICourseInstance
					 nti.intid.interfaces.IIntIdRemovedEvent"/>

	<!-- deny open enrollment -->
	<subscriber handler=".enrollment.check_open_enrollment_record_added" />

	<!-- managing enrollment as you change scope -->
	<subscriber handler=".enrollment.on_modified_potentially_move_courses" />

	<!-- managing the scope as you enroll/drop/modify -->
	<subscriber handler=".sharing.on_drop_exit_scope_membership" />
	<subscriber handler=".sharing.on_enroll_record_scope_membership" />
	<subscriber handler=".sharing.on_modified_update_scope_membership" />
	<subscriber handler=".sharing.on_moved_between_courses_update_scope_membership" />

	<!-- weak references -->
	<adapter factory="nti.intid.wref.ArbitraryOrderableWeakRef"
			 provides="nti.wref.interfaces.IWeakRef"
			 for=".interfaces.ICourseInstanceEnrollmentRecord" />

	<!-- These are a type of Entity, but they have no global
	name, so we have to be careful to override the weak ref -->
	<adapter factory=".sharing._CourseInstanceSharingScopeWeakRef"
			 provides="nti.wref.interfaces.IWeakRef"
			 for=".interfaces.ICourseInstanceSharingScope" />

	<adapter factory=".sharing._CourseInstanceSharingScopePrincipal"
			 for=".interfaces.ICourseInstanceSharingScope"
			 provides="zope.security.interfaces.IPrincipal" />

	<!-- vendor info -->
	<adapter factory=".vendorinfo.CourseInstanceVendorInfo" />

	<!-- Synchronizing external things into objects -->
	<adapter factory="._synchronize._GenericFolderSynchronizer"
			 for=".catalog.CourseCatalogFolder
				  nti.contentlibrary.interfaces.IDelimitedHierarchyBucket" />

	<adapter factory="._synchronize._GenericFolderSynchronizer"
			 for=".interfaces.ICourseAdministrativeLevel
				  nti.contentlibrary.interfaces.IDelimitedHierarchyBucket" />

	<adapter factory="._synchronize._ContentCourseSynchronizer" />
	<adapter factory="._synchronize._CourseSubInstancesSynchronizer" />
	<adapter factory="._synchronize._MissingCourseSubInstancesSynchronizer" />
	<adapter factory="._synchronize._ContentCourseSubInstanceSynchronizer" />

	<!-- Assignment date overrides and policies -->
	<adapter factory=".assignment.CourseSubInstanceAssignmentDateContextFactory" />
	<adapter factory=".assignment.CourseInstanceAssignmentPoliciesFactory" />

	<!-- dublincore annotations -->
	<include package="zope.dublincore" />
	<adapter factory="nti.contentlibrary.dublincore.DisplayableContentZopeDublinCoreAdapter"
			 for=".interfaces.ICourseCatalogEntry"
			 provides="zope.dublincore.interfaces.IWriteZopeDublinCore" />

	<class class=".catalog.CourseCatalogEntry">
		<implements interface="zope.annotation.interfaces.IAttributeAnnotatable" />
	</class>

	<class class=".legacy_catalog._CourseSubInstanceCatalogLegacyEntry">
		<implements interface="zope.annotation.interfaces.IAttributeAnnotatable" />
	</class>

	<!-- traversal -->
	<adapter factory=".traversal.CourseCatalogEntryTraverser"
			 for=".interfaces.ICourseInstance *"
			 name="CourseCatalogEntry" />

	<adapter factory="nti.dataserver.traversal.ContainerAdapterTraversable"
			 for=".interfaces.ICourseInstance" />

	<!-- Metadata -->
	<configure zcml:condition="installed nti.metadata">
		<subscriber	factory=".metadata_index._CoursePrincipalObjectsIntIds"
					provides="nti.dataserver.interfaces.IPrincipalMetadataObjectsIntIds" />

		<subscriber	factory=".metadata_index._OutlinePrincipalObjectsIntIds"
					provides="nti.dataserver.interfaces.IPrincipalMetadataObjectsIntIds" />
					
		<subscriber	factory=".metadata_index._EnrollmentPrincipalObjectsIntIds"
					provides="nti.dataserver.interfaces.IPrincipalMetadataObjectsIntIds" />
	</configure>

	<!--
		To get maximum externalization testing, let the dataserver
		register all its decorators.
		But note we don't want a hard (circular) dependency on this
		if we can avoid it because we are a plugin to it.
	-->
	<configure zcml:condition="have testmode">
		<include package="nti.dataserver.contenttypes.forums"
				 zcml:condition="installed nti.dataserver.contenttypes.forums" />
	</configure>

	<!-- Grading -->
	<adapter factory=".grading._grading_policy_for_course" />
	
	<ext:registerAutoPackageIO
		root_interfaces=".interfaces.ICourseGradingPolicy"
		modules=".grading" />
</configure>
